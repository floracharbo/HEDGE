# variable names
data_sources: ['CLNR', 'NTS']
behaviour_types: ['loads', 'car']
date_entries: ['dtm_yr', 'dtm_mth', 'dtm_day']  # type of information about date only
time_entries: ['dtm_hr', 'dtm_min']  # type of information about time
weekday_types: ['wd', 'we']  # week day types - wd: weekday day and we: weekend day
day_trans_types: ['wd2wd', 'wd2we', 'we2wd', 'we2we'] # going from weekday to weekday, weekday to weekend, etc.
directs: ['prev', 'next']  # when looking at potential substitutes for missing data, one can look at the same time in two directions: in the past of in the future
jumps:
  one_day: ['day']  # when looking at potential substitutes for missing data, one can make two jumps: one day in the past/future or one week in the past/future
  day_week: ['week', 'day']
  two_days: ['day', 'two_days']

consfactor: [2.25, 1.62, 1.36] # convert dist consumption tag for each trip # motorway, urban ('1'), rural ('2') kWh/10km

i_home: 23 # for purposeFrom/purposeTo, which one is home
type_cols:
  gen: ['int', 'str', 'str', 'flt']  #  this is for CLNR
#  gen: ['flt', 'str', 'int'] #  this is for open climate fix
#  gen: ['int', 'str', 'flt']  #  this is for pecan street
#  gen: ['str', 'int','int','int','int','int','flt','flt']  #  this is for https://data.london.gov.uk/dataset/photovoltaic--pv--solar-panel-energy-generation-data
  loads: ['int', 'str', 'flt']
  car: ['int', 'int', 'int', 'int', 'int', 'int', 'int', 'int', 'int', 'int', 'flt', 'flt', 'int']

line_terminator:
  CLNR: null
  NTS: '\n'

separator:
  CLNR: ','
  NTS: '\t'

# in the string which corresponds to time, which characters correspond to which type of time information
date_cols: ['day', 'mth', 'yr']
startind: [0, 3, 6]
endind: [2, 5, 10]

#name_cols_NTS: ['year', 'id', 'weekday', 'mode', 'dist', 'purposeFrom', 'purposeTo',
#                          'start_h', 'start_min', 'check_time', 'end_h', 'end_min', 'duration']
#i_cols_NTS: [1, 4, 7, 14, 21, 23, 24, 32, 33, 35, 37, 38, 44]
name_cols_NTS: ['id', 'weekday', 'mode', 'purposeFrom',
                'purposeTo', 'start_h', 'start_min', 'check_time',
                'end_h', 'end_min', 'dist', 'duration', 'year']
i_cols_NTS: [3, 6, 13, 16, 17, 21, 22, 24, 26, 27, 31, 35, 47]
i_cols_CLNR: [0, 3, 4]
#i_cols_gen: [0, 5, 6, 7, 8, 9, 10, 23, 24] this is for uk power networks
i_cols_gen: [0, 1, 3, 4] #  this is for CLNR
#i_cols_gen: [0, 1, 67] #  pecan street

i_cols_homes_info:
    CLNR: [0, 2, 4, 5]
    NTS:  [0, 2, 3, 5, 9, 10, 69]

name_cols_homes_info:
    CLNR: ['id', 'test_cell', 'start', 'end'] # household id, test_cell = '1a': 'loads', '5': 'gen'; start/end = strings corresponding to start and end of validity for given household
    NTS:  ['id', 'start_day', 'start_month', 'survey_year', 'end_day', 'end_month', 'home_type']

filling_in_entries: ['mean_abs_err', 'std_abs_err', 'p99_abs_err', 'max_abs_err', 'share_types_replaced']

sequence_entries_CLNR: ['mins', 'cum_day', 'cum_min', 'month', 'id']
#sequence_entries_NTS: ['cum_min', 'cum_min_end', 'cum_day', 'dist', 'purposeFrom', 'purposeTo',
#                       'weekday', 'home_type', 'cum_min_day_start', 'cum_min_day_end', 'duration']
sequence_entries_NTS: ['cum_min', 'cum_min_end', 'cum_day', 'dist', 'purposeFrom', 'purposeTo',
                       'weekday', 'home_type', 'cum_min_all', 'cum_min_all_end', 'duration', 'id', 'month']

dem_intervals: [[0, 7], [7, 11], [11, 14], [14, 17], [17, 21], [21, 24]]

NTS_day_keys: ["cum_day", "weekday", "avail", "car", "mins",
               "cum_min", "id", "month"]
car:
  c_max: 22 # kW max battery charge
  d_max: 100 # kW max battery discharge
  SoCmin: 0.1 # minimum state of charge
  SoC0: 0.5 # initial and final state of charge
  cap: 75 # kWh battery capacity

fill_types: ['day_week', 'two_days', 'one_day', 'lin_interp']
# day_week: Select from day or week before or after
# two_days: Select from one or two days before or after
# one_day: Select from day before or after
# lin_interp: Linear interpolation time steps before and after

# test cell type /data file name in CLNR data corresponding to each type of data
test_cell_translation:
  1a: 'loads'
  5: 'gen'

data_type_source:
  gen: 'CLNR'
  loads: 'CLNR'
  car: 'NTS'

var_file:
  gen: 'TC5/TrialMonitoringData.csv'
#  gen: 'TC20IHD/TrialMonitoringData.csv'
#  gen: '30min.parquet'  #  this is from open climate fix
#  gen: 'EXPORT HourlyData - Customer Endpoints.csv'  #  this is for uk power networks
 #   'gen': '15minute_data_austin.csv'  #  this is pecan street
  loads: 'TC1a/TrialMonitoringDataHH.csv'
  car: 'UKDA-5340-tab/tab/trip_eul_2002-2020.tab'

homes_file:
  CLNR: 'TC1a/CustomerTestCellDefinition.csv'
  NTS: 'UKDA-5340-tab/tab/household_eul_2002-2020.tab' # see ukda_data_dictionaries for info on NTS

outs_labels: ['days', 'abs_error', 'types_replaced_eval', 'all_data',
        'granularities', 'range_dates', 'n_ids']

paths:
  hedge_inputs_folder: 'data/hedge_inputs'
  record_folder: 'data/other_outputs'
  input_folder: 'data'